/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface CalculatorBase {
    }
    interface CalculatorButton {
        "class": string;
        "value": string;
    }
    interface CalculatorDisplay {
        "displayValue": string;
    }
}
export interface CalculatorButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalculatorButtonElement;
}
declare global {
    interface HTMLCalculatorBaseElement extends Components.CalculatorBase, HTMLStencilElement {
    }
    var HTMLCalculatorBaseElement: {
        prototype: HTMLCalculatorBaseElement;
        new (): HTMLCalculatorBaseElement;
    };
    interface HTMLCalculatorButtonElementEventMap {
        "buttonClick": string;
    }
    interface HTMLCalculatorButtonElement extends Components.CalculatorButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalculatorButtonElementEventMap>(type: K, listener: (this: HTMLCalculatorButtonElement, ev: CalculatorButtonCustomEvent<HTMLCalculatorButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalculatorButtonElementEventMap>(type: K, listener: (this: HTMLCalculatorButtonElement, ev: CalculatorButtonCustomEvent<HTMLCalculatorButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalculatorButtonElement: {
        prototype: HTMLCalculatorButtonElement;
        new (): HTMLCalculatorButtonElement;
    };
    interface HTMLCalculatorDisplayElement extends Components.CalculatorDisplay, HTMLStencilElement {
    }
    var HTMLCalculatorDisplayElement: {
        prototype: HTMLCalculatorDisplayElement;
        new (): HTMLCalculatorDisplayElement;
    };
    interface HTMLElementTagNameMap {
        "calculator-base": HTMLCalculatorBaseElement;
        "calculator-button": HTMLCalculatorButtonElement;
        "calculator-display": HTMLCalculatorDisplayElement;
    }
}
declare namespace LocalJSX {
    interface CalculatorBase {
    }
    interface CalculatorButton {
        "class"?: string;
        "onButtonClick"?: (event: CalculatorButtonCustomEvent<string>) => void;
        "value"?: string;
    }
    interface CalculatorDisplay {
        "displayValue"?: string;
    }
    interface IntrinsicElements {
        "calculator-base": CalculatorBase;
        "calculator-button": CalculatorButton;
        "calculator-display": CalculatorDisplay;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calculator-base": LocalJSX.CalculatorBase & JSXBase.HTMLAttributes<HTMLCalculatorBaseElement>;
            "calculator-button": LocalJSX.CalculatorButton & JSXBase.HTMLAttributes<HTMLCalculatorButtonElement>;
            "calculator-display": LocalJSX.CalculatorDisplay & JSXBase.HTMLAttributes<HTMLCalculatorDisplayElement>;
        }
    }
}
