import { ModifierSyntaxKind, Node, SourceFile, SyntaxKind } from 'typescript';
export interface TransformedResult {
    found: boolean;
    fullText: string;
}
export interface ASTMatcher {
    nodeKind: SyntaxKind;
    name?: string;
    has?: ModifierSyntaxKind;
    initializerKind?: SyntaxKind;
}
export declare type ASTMatchCallback = (node: Node) => Node;
export declare type WalkerNodeCallback = (node: Node) => boolean;
export declare function loadTypescriptCodeFromMemory(code: string): SourceFile;
export declare function walkTo(file: SourceFile, walkPath: ASTMatcher[]): Node;
export declare function walkAll(file: SourceFile, nodeKind: SyntaxKind, cb: WalkerNodeCallback): void;
export declare function makeMatcher(kind: SyntaxKind, { name, modifier, initializer }?: {
    name?: string;
    modifier?: ModifierSyntaxKind;
    initializer?: SyntaxKind;
}): ASTMatcher;
export declare function transformNodeWith(sourceFile: SourceFile, walkPath: ASTMatcher[], userAction: ASTMatchCallback): TransformedResult;
